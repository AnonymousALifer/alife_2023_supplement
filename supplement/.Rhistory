library(ggplot2)
library(tidyverse)
library(tidyverse)
library(cowplot)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
data <- read.csv("data/roll_data.csv")
data <- data.frame()
data$die.1 = round(runif(n = 100, min = 1, max = 6))
data <- data.frame(id = 1:100)
data$die.1 = round(runif(n = 100, min = 1, max = 6))
data$die.1
hist(data$die.1)
hist(data$die.1, breaks = 1:6)
hist(data$die.1, breaks = 1:6)
data$die.1 = sample(1:6, 100, replace = T)
hist(data$die.1, breaks = 1:6)
data <- data.frame(id = 1:1000)
data$die.1 = sample(1:6, 1000, replace = T)
hist(data$die.1, breaks = 1:6)
data <- data.frame(id = 1:1000)
data$die.1 = sample(1:6, 1000, replace = T)
data$die.2 = sample(1:6, 1000, replace = T)
data$die_combo <- paste0(data$die.1, "+", data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
data$die.2 <- as.factor(data$die.2)
data$result <- as.factor(data$value)
num_trials = 1000
data <- data.frame(id = 1:num_trials)
data$die.1 = sample(1:6, num_trials, replace = T)
data$die.2 = sample(1:6, num_trials, replace = T)
data$die_combo <- paste0(data$die.1, "+", data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
data$die.2 <- as.factor(data$die.2)
data$result <- as.factor(data$value)
data$value = data$die.1 + data$die.2
data$die_combo <- paste0(data$die.1, "+", data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
data$die.2 <- as.factor(data$die.2)
data$result <- as.factor(data$value)
theme_set(theme_cowplot())
We rolled two twelve-sided dice `r nrow(filter(data, die_combo=="12+12"))` times.
theme_set(theme_cowplot())
ggplot(data=filter(data, die_combo=="12+12"), aes(x=result, color=die_combo, fill=die_combo)) +
geom_histogram(stat="count") +
facet_wrap(~die_combo, ncol=1) +
theme(legend.position="none")
num_trials = 1000
data <- data.frame(id = 1:num_trials)
sample(1:12, num_trials, replace = T)
num_trials = 1000
data <- data.frame(id = 1:num_trials)
data$value_1 = sample(1:12, num_trials, replace = T)
data$value_2 = sample(1:12, num_trials, replace = T)
data$value = data$value_1 + data$value_2
data$die_combo <- paste0(data$die.1, "+", data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
data$die.2 <- as.factor(data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
num_trials = 1000
data <- data.frame(id = 1:num_trials)
data$die.1 = 12
data$die.2 = 12
data$value_1 = sample(1:12, num_trials, replace = T)
data$value_2 = sample(1:12, num_trials, replace = T)
data$value = data$value_1 + data$value_2
data$die_combo <- paste0(data$die.1, "+", data$die.2)
data$die_combo <- as.factor(data$die_combo)
data$die.1 <- as.factor(data$die.1)
data$die.2 <- as.factor(data$die.2)
data$result <- as.factor(data$value)
theme_set(theme_cowplot())
theme_set(theme_cowplot())
## What values are most common from adding together the results of two twelve-sided dice?
We rolled two twelve-sided dice `r nrow(filter(data, die_combo=="12+12"))` times.
```{r, message=FALSE, warning=FALSE}
ggplot(data=filter(data, die_combo=="12+12"), aes(x=result, color=die_combo, fill=die_combo)) +
geom_histogram(stat="count") +
facet_wrap(~die_combo, ncol=1) +
theme(legend.position="none")
knitr::write_bib(c(.packages(), "bookdown"), file="packages.bib")
# External
library(ggplot2)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
source('../global_shared_files/constant_vars__two_cues.R')
source('../global_shared_files/shared_funcs__two_cues.R')
source('../global_shared_files/constant_vars__two_cues.R')
commandArgs = c('../')
source('../global_shared_files/shared_funcs__two_cues.R')
commandArgs = c('test', '../')
source('../global_shared_files/shared_funcs__two_cues.R')
commandArgs = c('test', 'foo', '../')
source('../global_shared_files/shared_funcs__two_cues.R')
source('../global_shared_files/constant_vars__two_cues.R')
source('../global_shared_files/shared_funcs__two_cues.R')
# External
library(ggplot2)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
source('../global_shared_files/constant_vars__two_cues.R')
source('../global_shared_files/shared_funcs__two_cues.R')
df = read.csv('../experiments/exploration/2022_07_27__two_cues_phylo/data/combined_final_dominant_data.csv')
df = classify_individual_trials(df)
df = classify_seeds(df)
df_summary = summarize_final_dominant_org_data(df)
classification_summary = summarize_classifications(df_summary)
ggplot(df, aes(x = seed_order, y = accuracy, color = seed_classification)) +
geom_point(alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
ggplot(classification_summary, aes(x = seed_classification_factor, y = count, fill = seed_classification_factor)) +
geom_col() +
geom_text(aes(y = count + 3, label = count)) +
scale_fill_manual(values = color_map) +
xlab('Classification') +
ylab('Number of replicates') +
theme(legend.position = 'none')
# External
library(ggplot2)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Internal
source('../global_shared_files/constant_vars__two_cues.R')
source('../global_shared_files/shared_funcs__two_cues.R')
df = read.csv('../experiments/exploration/2022_07_27__two_cues_phylo/data/combined_final_dominant_data.csv')
df = classify_individual_trials(df)
df = classify_seeds(df)
df_summary = summarize_final_dominant_org_data(df)
classification_summary = summarize_classifications(df_summary)
ggplot(classification_summary, aes(x = seed_classification_factor, y = count, fill = seed_classification_factor)) +
geom_col() +
geom_text(aes(y = count + 3, label = count)) +
scale_fill_manual(values = color_map) +
xlab('Classification') +
ylab('Number of replicates') +
theme(legend.position = 'none')
ggplot(classification_summary, aes(x = seed_classification_factor, y = count, fill = seed_classification_factor)) +
geom_col() +
geom_text(aes(y = count + 3, label = count)) +
scale_fill_manual(values = color_map) +
xlab('Classification') +
ylab('Number of replicates') +
theme(legend.position = 'none')
Order the points by mean accuracy
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
ggplot(df, aes(x = seed_order, y = accuracy, color = seed_classification)) +
geom_point(alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
ggplot(df_summary, aes(x = seed_order, color = seed_classification)) +
geom_point(aes(y = accuracy_mean)) +
geom_point(aes(y = accuracy_min), alpha = 0.2) +
geom_point(aes(y = accuracy_max), alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
ggplot(df_summary, aes(x = seed_order, color = seed_classification)) +
geom_point(aes(y = accuracy_mean)) +
geom_point(aes(y = accuracy_min), alpha = 0.2) +
geom_point(aes(y = accuracy_max), alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
df_summary = df_summary[order(df_summary$accuracy_mean),]
df_summary$seed_order = 1:nrow(df_summary)
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
ggplot(df_summary, aes(x = seed_order, color = seed_classification)) +
geom_point(aes(y = accuracy_mean)) +
geom_point(aes(y = accuracy_min), alpha = 0.2) +
geom_point(aes(y = accuracy_max), alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
ggplot(df, aes(x = seed_order, y = accuracy, color = seed_classification)) +
geom_point(alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
# Raincloud plot of genome length
ggplot(df_summary, aes(x = seed_classification_factor, y = genome_length, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Genome length') +
theme(legend.position = 'none')
# External
library(ggplot2)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
# Internal
source('../global_shared_files/constant_vars__three_cues_one_set.R')
source('../global_shared_files/shared_funcs__three_cues_one_set.R')
# Internal
source('../global_shared_files/constant_vars__three_cues_one_set.R')
source('../global_shared_files/shared_funcs__three_cues_one_set.R')
df = read.csv('../experiments/exploration/2022_07_28__three_cues_one_set/data/combined_final_dominant_data.csv')
df = classify_individual_trials(df)
df = classify_seeds(df)
classification_summary = summarize_classifications(df_summary)
ggplot(classification_summary, aes(x = seed_classification_factor, y = count, fill = seed_classification_factor)) +
geom_col() +
geom_text(aes(y = count + 3, label = count)) +
scale_fill_manual(values = color_map) +
xlab('Classification') +
ylab('Number of replicates') +
theme(legend.position = 'none')
df_summary = df_summary[order(df_summary$accuracy_mean),]
df_summary$seed_order = 1:nrow(df_summary)
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
df_summary = df_summary[order(df_summary$accuracy_mean),]
df_summary$seed_order = 1:nrow(df_summary)
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
df_summary$seed
df$seed == seed
df[df$seed == seed,]
df[df$seed == seed,]$seed_order
df_summary[df_summary$seed == seed,]
# External
library(ggplot2)
library(dplyr)
source("https://gist.githubusercontent.com/benmarwick/2a1bb0133ff568cbe28d/raw/fb53bd97121f7f9ce947837ef1a4c65a73bffb3f/geom_flat_violin.R")
source('../global_shared_files/shared_funcs__three_cues_one_set.R')
df = read.csv('../experiments/exploration/2022_07_28__three_cues_one_set/data/combined_final_dominant_data.csv')
df = classify_individual_trials(df)
df = classify_seeds(df)
df_summary = summarize_final_dominant_org_data(df)
classification_summary = summarize_classifications(df_summary)
ggplot(classification_summary, aes(x = seed_classification_factor, y = count, fill = seed_classification_factor)) +
geom_col() +
geom_text(aes(y = count + 3, label = count)) +
scale_fill_manual(values = color_map) +
xlab('Classification') +
ylab('Number of replicates') +
theme(legend.position = 'none')
df_summary = df_summary[order(df_summary$accuracy_mean),]
df_summary$seed_order = 1:nrow(df_summary)
df$seed_order = NA
for(seed in unique(df$seed)){
df[df$seed == seed,]$seed_order = df_summary[df_summary$seed == seed,]$seed_order
}
ggplot(df_summary, aes(x = seed_order, color = seed_classification)) +
geom_point(aes(y = accuracy_mean)) +
geom_point(aes(y = accuracy_min), alpha = 0.2) +
geom_point(aes(y = accuracy_max), alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
ggplot(df, aes(x = seed_order, y = accuracy, color = seed_classification)) +
geom_point(alpha = 0.2) +
scale_color_manual(values = color_map) +
xlab('Replicates (ordered)') +
ylab('Accuracy') +
labs(color = 'Classification')
# Raincloud plot of accuracy
ggplot(df, aes(x = seed_classification_factor, y = accuracy, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Accuracy') +
theme(legend.position = 'none')
# Raincloud plot of merit
ggplot(df, aes(x = seed_classification_factor, y = merit, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Merit') +
theme(legend.position = 'none')
# Raincloud plot of genome length
ggplot(df_summary, aes(x = seed_classification_factor, y = genome_length, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Genome length') +
theme(legend.position = 'none')
# Raincloud plot of mean accuracy of replicates
ggplot(df_summary, aes(x = seed_classification_factor, y = accuracy_mean, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
scale_y_continuous(limits = c(0,1)) +
xlab('Classification') +
ylab('Mean accuracy') +
theme(legend.position = 'none')
# Raincloud plot of mean merit of replicates
ggplot(df_summary, aes(x = seed_classification_factor, y = merit_mean, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Mean merit') +
theme(legend.position = 'none')
# Raincloud plot of mean merit of replicates
ggplot(df_summary, aes(x = seed_classification_factor, y = merit_mean, fill = seed_classification_factor)) +
geom_flat_violin(scale="width", position = position_nudge(x = .2, y = 0), alpha = .8 ) +
geom_point(mapping=aes(color=seed_classification_factor), position = position_jitter(width = .15, height = 0), size = .5, alpha = 0.8 ) +
geom_boxplot( width = .1, outlier.shape = NA, alpha = 0.5 ) +
scale_fill_manual(values = color_map) +
scale_color_manual(values = color_map) +
xlab('Classification') +
ylab('Mean merit') +
theme(legend.position = 'none')
